#! /Library/Frameworks/Python.framework/Versions/Current/bin/python

# A Python utility script to read pdh files and modify header information
# from user input.
# 
#  (c) 2009-2011 by David P. Goldenberg
#  Please send feature requests, bug reports, or feedback to this address:
#           Department of Biology
#           University of Utah
#           257 South 1400 East
#           Salt Lake City, UT
#     
#           goldenberg@biology.utah.edu
#     
#  This software is distributed under the conditions of the BSD license.
#  Please see the documentation for further details.

import sys
from optparse import OptionParser
import saxs as sx

info = """ modPdhHead
    A Python utility script to read pdh files and modify header information from user input.
    Parameters as specified in standard pdh specification plus special fields for 
    Anton Paar SAXSess and Utah SAXS tools
    
    Requires one argument, name of the pdh file
    writes to new file with user-specified name
    
    Options:
      -h, --help  show a help message and exit
      -i, --info  Show additional information and exit
    """


def main():
    parser = OptionParser()
    
    parser.add_option("-i", "--info", action = "store_true", 
                   dest="showInfo", default = False, 
                   help="Show additional information and exit")

                   
    (options, args) = parser.parse_args()
    if (options.showInfo or len(args)==0):
        sys.exit(info)

    inFileName = args[0]
    
    rootName = inFileName.rpartition('.')[0]
    outFileName = rootName + "_hdMod.pdh"
    
    pdhHeader, data = sx.readPdh(inFileName)
    
    if pdhHeader[2][1]==0:
        beamProfType = "No beam length profile"
    elif pdhHeader[2][1] ==1:
        beamProfType = "Sigmoidal"
    elif pdhHeader[2][1] ==2:
        beamProfType = "Trapezoidal"
    else:
        beamProfType = "Not recognized"
    
    print ""
    print "Input file name: " + inFileName
    outFileNameInp = raw_input("Output file name (" + outFileName + "): ")
    if str.strip(outFileNameInp) != "":
        outFileName = str.strip(outFileNameInp)  
        
  
    print ""
    print "PDH-specified parameters "
    desc= raw_input("Description (" + pdhHeader[0] + "): ")
    if str.strip(desc) != "":
        pdhHeader[0] = desc    
    
    keyWordString = ""
    for word in pdhHeader[1]:
        keyWordString = keyWordString + " " + word
    keyWordString = raw_input("Key words (" + keyWordString + "): ")
    if str.strip(keyWordString) != "":
        pdhHeader[1] = keyWordString.split()  
    
    pdhHeader[2][0] = noPtsInput(pdhHeader[2][0],data)
    
    normFact = raw_input( "Normalization factor (" + str(pdhHeader[3][3]) + "): ")
    if str.strip(normFact) != "":
        pdhHeader[3][3] = float(normFact)
    
    
    print ""
    print "SAXSess parameters"
    sample2det = raw_input( "Sample to detector distance in mm (" + str(pdhHeader[3][1]) + "): ")
    if str.strip(sample2det) != "":
        pdhHeader[3][1] = float(sample2det)
    
    wavelength = raw_input( "Wavelength (" + str(pdhHeader[3][4]) + "): ")
    if str.strip(wavelength) != "":
        pdhHeader[3][4] = float(wavelength)
    
    print ""
    print "Utah SAXS Tools parameters"
    beamType = raw_input( "Beam length profile type (" + beamProfType + "): \n" 
    + "\t 0: None \n"
    + "\t 1: Sigmoidal \n"
    + "\t 2: Trapezoidal \n"
    )
    if str.strip(beamType) != "":
        pdhHeader[2][1] = int(beamType)
    
    beamParamA = raw_input( "Beam length parameter a (" + str(pdhHeader[4][0]) + "): ")
    if str.strip(beamParamA) != "":
        pdhHeader[4][0] = float(beamParamA)

    beamParamB = raw_input( "Beam length parameter b (" + str(pdhHeader[4][1]) + "): ")
    if str.strip(beamParamB) != "":
        pdhHeader[4][1] = float(beamParamB,)
    
    beamHW = raw_input( "Beam half-width (" + str(pdhHeader[4][2]) + "): ")
    if str.strip(beamHW) != "":
        pdhHeader[4][2] = float(beamHW)
    
    detSLW = raw_input( "Detector slit-width (" + str(pdhHeader[4][3]) + "): ")
    if str.strip(detSLW) != "":
        pdhHeader[4][3] = float(detSLW)

    pdhHeader[4][4] = qScaleInput(pdhHeader[4][4])
    
    pdhHeader[2][2] = absIinput(pdhHeader[2][2])
    
    sx.writePdh(outFileName,pdhHeader, data)

def noPtsInput(curValue,data):

    # Check that header value really matches no. of data points
    if curValue != len(data[0]):
        message = ("The number of data points indicated in the header (" + 
                    str(curValue) + ") does not match the actual number of points (" + 
                    str(len(data[0])) + ").")
        print message
        fix = raw_input("Do you want to fix the header? (Y/n)")
        fix = str.strip(fix)
        if fix == "":
            print "Header changed"
            return len(data[0])
        elif (fix[0] == "y" or fix[0] == "Y"):
            print "Header changed"
            return len(data[0])
        else:
            print "Header not changed"
            return curValue
    else:
        print "No. of data points = " + str(curValue)
        return curValue
            
def qScaleInput(curValue):
    if curValue == 1:
        message = "Q-scale (A-1):\n"
    elif curValue == 10:
        message = "Q-scale (nm-1):\n"
    else:    
        message = "Q-scale (" + str(curValue) + ", not recognized):\n"

    qScale = raw_input(message
        + "\t 1:  A-1 \n"
        + "\t 10: nm-1 \n")
    if str.strip(qScale) == "":
        qScale = curValue
    else:
        qScale = float(qScale)
    if (qScale == 1.0 or qScale == 10.0):
        return qScale
    else:
        print "Only 1 and 10 are valid values."
        qScale = qScaleInput(curValue)
        return qScale

def absIinput(curValue):
    if curValue != 0:
        message = "Absolute intensity scale (cm-1), (Y/n)? "
        absI = raw_input(message)
        if str.strip(absI) == "":
        	return 1
    else:
        message = "Absolute intensity scale (cm-1), (y,N)? "
    	absI = raw_input(message)
    	if str.strip(absI) == "":
    		return 0    	
    if (absI[0] == "y" or absI[0] == "Y"):
        return 1
    else:
        return 0
    
   
if __name__=="__main__":
    main()
