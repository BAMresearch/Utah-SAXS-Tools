#! /Library/Frameworks/Python.framework/Versions/Current/bin/python

# A Python utility script to read generic SAXS files and add a pdh header
# from user input.

#  (c) 2009-2011 by David P. Goldenberg
#  Please send feature requests, bug reports, or feedback to this address:
#           Department of Biology
#           University of Utah
#           257 South 1400 East
#           Salt Lake City, UT
#     
#           goldenberg@biology.utah.edu
#     
#  This software is distributed under the conditions of the BSD license.
#  Please see the documentation for further details.


import sys
import string
from optparse import OptionParser
import numpy as np
import saxs as sx


info = """ makePdh
    A Python utility script to read generic SAXS files and add a pdh header from 
    interactive user input. 
    Parameters as specified in standard pdh specification plus special fields for 
    Anton Paar SAXSess and Utah SAXS tools 
    Requies saxs.py module 
    
    Requires one argument, name of the pdh file
    Options:
      -h, --help            show help message and exit
      -i, --info            Show additional information and exit
      --noErr               no I error data
      -c NUMBCOLS, --cols=NUMBCOLS
                            Number of columns in input file. Defaut = 3.
    
    Writes to new file with name specified by interactive prompt.
    
    Default behavior is to look for lines containing exactly 3 columns that can be read
    as floating point numbers, which are interpretted as containing q, I and I errors.
    If the -c option is set to 2, the program looks for lines with exactly 2 columns and 
    interprets them as containing q and I.  I errors are set to zero.
    If -c option is set to 3 or greater and the --noErr option is not used, the program looks
    for lines containing the specified number of columns and reads the first three as q, I and I errors.
    If the -c option is set to 3 or greater and the --noErr option is used, the program looks for 
    lines containing the specified number of columns, reads the first two as q and I, and sets 
    the I errors to zero.
    """



def main():
    parser = OptionParser()
    parser.add_option("-i", "--info", action = "store_true", 
                   dest="showInfo", default = False, 
                   help="Show additional information and exit")
    parser.add_option("--noErr", action = "store_true", 
                   dest="noErr", default = False, 
                   help="no I error data")
    
    parser.add_option("-c","--cols", action = "store", 
                   dest="numbCols", default = 3, type="float",
                   help="Number of columns in input file. Defaut = 3.")
                  
    (options, args) = parser.parse_args()
    if (options.showInfo or len(args)==0):
        sys.exit(info)
    
    inFileName = args[0]
    
    # default output name is original name with extension replaced with pdh
    rootName = inFileName.rpartition('.')[0]
    outFileName = rootName + ".pdh"
    
    if options.numbCols < 2:
        message = "The number of columns must be at least two."
        sys.exit(message)

    if options.numbCols==2:
        data = sx.readQI(inFileName)
        noPts = len(data[0])
        data.append(np.zeros(noPts))
        
    else:
        data = sx.readQIE(inFileName, numbCols=options.numbCols)
        if options.noErr:
            data[2]=np.zeros(len(data[0]))

    
    # default values for header fields
    
    pdhHeader = ["",["SAXS"],[],[],[]]
    pdhHeader[2] = [len(data[0]), 0, 0, 0, 0, 0, 0, 0]
    pdhHeader[3] = [0.0, 0.0, 0.0, 1.0, 1.542]
    pdhHeader[4] = [0.0, 0.0, 0.0, 0.0, 0.0]
    
    print("")
    print("Input file name: " + inFileName)
    outFile = input("Output file name (" + outFileName + "): ")
    if str.strip(outFile) != "":
        outFileName = str.strip(outFile)   
  
    print("")
    print("PDH-specified parameters ")
    desc= input("Description: ")
    pdhHeader[0] = desc    

    keyWordString = input("Key words (SAXS): ")
    if str.strip(keyWordString) != "":
        pdhHeader[1] = keyWordString.split()  
    
   
    pdhHeader[2][0] = noPtsInput(pdhHeader[2][0],data)
    
    normFact = input( "Normalization factor (" + str(pdhHeader[3][3]) + "): ")
    if str.strip(normFact) != "":
        pdhHeader[3][3] = float(normFact)
    
    
    print("")
    print("SAXSess parameters")
    sample2det = input( "Sample to detector distance in mm: ")
    if str.strip(sample2det) != "":
        pdhHeader[3][1] = float(sample2det)
    
    wavelength = input( "Wavelength (" + str(pdhHeader[3][4]) + "): ")
    if str.strip(wavelength) != "":
        pdhHeader[3][4] = float(wavelength)
    
    print("")
    print("Utah SAXS Tools parameters")
    beamType = input( "Beam length profile type: \n" 
    + "\t 0: None (default) \n"
    + "\t 1: Sigmoidal \n"
    + "\t 2: Trapezoidal \n"
    )
    if str.strip(beamType) != "":
        pdhHeader[2][1] = int(beamType)

    if pdhHeader[2][1] == 1:    
        beamParamA = input( "Sigmoidal beam length parameter a: ")
        if str.strip(beamParamA) != "":
            pdhHeader[4][0] = float(beamParamA)
    
        beamParamB = input( "Sigmoidal beam length parameter b: ")
        if str.strip(beamParamB) != "":
            pdhHeader[4][1] = float(beamParamB)

    elif pdhHeader[2][1] == 2:
        beamParamA = input( "Trapezoidal beam length parameter a (long side): ")
        if str.strip(beamParamA) != "":
            pdhHeader[4][0] = float(beamParamA)
    
        beamParamB = input( "Trapezoidal beam length parameter b (short side): ")
        if str.strip(beamParamB) != "":
            pdhHeader[4][1] = float(beamParamB)
        
    if pdhHeader[2][1] != 0:
        beamHW = input( "Beam half-width in Q-units (" + str(pdhHeader[4][2]) + "): ")
        if str.strip(beamHW) != "":
            pdhHeader[4][2] = float(beamHW)
        
        detSLW = input( "Detector slit-width in Q-units (" + str(pdhHeader[4][3]) + "): ")
        if str.strip(detSLW) != "":
            pdhHeader[4][3] = float(detSLW)
        
    pdhHeader[4][4] = qScaleInput()
    
    pdhHeader[2][2] = absIinput(pdhHeader[2][2])    
        
    if pdhHeader[2][0] < len(data[0]):
        for i in range(3):        
            data[i] = data[i].tolist()
            data[i] = data[i][:pdhHeader[2][0]]
        
    sx.writePdh(outFileName,pdhHeader, data)

def noPtsInput(defaultValue,data):
    noPts = input("No. of data pts (" + str(defaultValue) + "): ")
    if str.strip(noPts) == "":
        return defaultValue
    else:
        noPts = int(noPts)
        if noPts > defaultValue:
            print("The input file contains only " + str(defaultValue) + " points")
            noPts = noPtsInput(defaultValue,data)
            return noPts
        if noPts < defaultValue:
            qMax = data[0][noPts-1]
            print("The input file contains " + str(defaultValue) + " points")
            trim = input("Do you want to trim the data to " + str(noPts) 
                    + " points, with Q-max = " + str(qMax) + " ? (y/N)?")
            trim = str.strip(trim)
            if trim == "":
                noPts = noPtsInput(defaultValue,data)
                return noPts
            elif (trim[0] == "y" or trim[0] == "Y"):
                return noPts
            else:
                noPts = noPtsInput(defaultValue,data)
                return noPts
        else:
            return defaultValue
            
def qScaleInput():
    qScale = input("Q-scale: \n"
        + "\t 1: A-1 (default) \n"
        + "\t 10: nm \n")
    if str.strip(qScale) == "":
        return 1
    else:
        qScale = float(qScale)
        if (qScale == 1.0 or qScale == 10.0):
            return qScale
        else:
            print("Only 1 and 10 are valid values.")
            qScale = qScaleInput()
            return qScale
               
def absIinput(curValue):
    if curValue != 0:
        message = "Absolute intensity scale (cm-1), (Y/n)? "
        absI = input(message)
        if str.strip(absI) == "":
            return 1
    else:
        message = "Absolute intensity scale (cm-1), (y,N)? "
        absI = input(message)
        if str.strip(absI) == "":
            return 0        
    if (absI[0] == "y" or absI[0] == "Y"):
        return 1
    else:
        return 0
    
               
if __name__=="__main__":
    main()
