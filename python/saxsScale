#! /Library/Frameworks/Python.framework/Versions/Current/bin/python

#   A Python scripts to apply a scaling factor to a SAXS profile. 

#  (c) 2009-2011 by David P. Goldenberg
#  Please send feature requests, bug reports, or feedback to this address:
#           Department of Biology
#           University of Utah
#           257 South 1400 East
#           Salt Lake City, UT
#     
#           goldenberg@biology.utah.edu
#     
#  This software is distributed under the conditions of the BSD license.
#  Please see the documentation for further details.

import sys
from optparse import OptionParser
import numpy as np 
import matplotlib.pyplot as plt
from uncertainties import ufloat
import saxs as sx

info = """ saxsScale.py
      A Python scripts to apply a scaling factor to a SAXS profile. 
      The program requires two input arguments, the scaling factor 
      and the name of the data file.
      Options:
      -h, --help            show this help message and exit
      -i, --info            Show more help information.
      -r, --raw             Raw input file. Default is pdh format
      -s, --si              Read data from system standard input and write to
                            standard output
      --so                  Direct output to system standard output
      -t PLOTTYPE, --plot=PLOTTYPE
                            Plot type. Options are none, linear, log, loglog,
                            guinier, kratky. Default is linear
    
      The output is directed to a new file, 
      or to standard output if the -s (--stdo) option is chosen.
      The default behavior is to assume the data file is in PDH format.
      If the file names are preceded by the argument -r, the program assumes the files 
      are in a "raw" format and only looks for rows containing exactly three fields.
            
  """

def main():
    ##### Parse options and arguments   ##########
    parser = OptionParser()
    
    parser.add_option("-i", "--info", action="store_true", dest="showInfo", default=False,
                        help ="Show more help information.")
    parser.add_option("-r", "--raw", action = "store_true", dest="rawFile", default = False, 
                       help="Raw input file. Default is pdh format")
    parser.add_option("-s", "--si", action = "store_true", dest="stdin", default = False, 
                help="Read data from system standard input and write to standard output")  
    parser.add_option("--so", action = "store_true", dest="stdo", default = False, 
                       help="Direct output to system standard output")                       
    parser.add_option("-t", "--plot", action = "store", type = "string", 
                       dest="plotType", default = "linear", 
                       help="Plot type. Options are none, linear, log, "\
                            + "loglog, guinier, kratky. Default is linear")    
    
    (options, args) = parser.parse_args()
    scaleFact= float(args[0])
    
    if options.showInfo:
        sys.exit(info)
        
    message = '\n saxsTemplate.py: A python script to open and write a SAXS profile. ' \
                + ' Intended as a template for data processing scripts.\n'\
                + ' For help, type > saxsBinData.py -i'

    fileNames = sx.fileNamer(options,args,2, 'scale')
    if fileNames == None:
        sys.exit(message)
    else:
        inFileName = fileNames[1]
        outFileName = fileNames[2]
    
    
    ###### Window Title
    if inFileName == None:
        windowTitle = 'Scaled SAXS Data'
        inputLegend = ['Input data']
    else:   
        inputLegend = [inFileName]
        windowTitle = 'Scaled SAXS Data: ' + inFileName
    
    ###### Read input data
        
    if options.rawFile:
        data = sx.readQIE(inFileName)
    else:
        header, data = sx.readPdh(inFileName)
        data =np.array(data)
        
        
    ##### Scale intensities and errors and make output data ####
    
    q = data[0]
    i = data[1]*scaleFact
    iErr = data[2]*scaleFact
    
    outData = [q,i,iErr]
        
    #### Plots   
    if options.plotType != 'none':
        plotParam = [options.plotType,0,0]
        if options.rawFile:
            qUnits=0
            absI = False
        else:
            qUnits = header[4][4]
            if header[2][2] == 1:
                absI = True
            else:
                absI = False
        
        outLegend = ['Scaled data. Scale factor = ' + args[0]]
                
        fig = plt.figure()
        plotPos = 211
        ax1 = sx.saxsPlot(fig,plotPos, plotParam, [data],
                            legends=inputLegend, qUnits=qUnits, absI=absI)
        plotPos=212
        ax2 = sx.saxsPlot(fig,plotPos, plotParam, [outData],
                            legends=outLegend, qUnits=qUnits, absI=absI)
        fig.subplots_adjust(bottom=0.1, hspace=0.25) 
        fig.canvas.set_window_title(windowTitle) 
        plt.show()
        

    ##### write output data to output file
    if options.rawFile:
        sx.writeQIE(outFileName,outData)
    else:
    ####### Include any modifications to the header here
        header[2][0] = len(outData[0])
        sx.writePdh(outFileName, header,outData)

    
if __name__=="__main__":
    main()


