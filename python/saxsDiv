#! /Library/Frameworks/Python.framework/Versions/Current/bin/python

#  A Python script to divide a SAXS profile by another specified profile. 

#  (c) 2009-2011 by David P. Goldenberg
#  Please send feature requests, bug reports, or feedback to this address:
#           Department of Biology
#           University of Utah
#           257 South 1400 East
#           Salt Lake City, UT
#     
#           goldenberg@biology.utah.edu
#     
#  This software is distributed under the conditions of the BSD license.
#  Please see the documentation for further details.

import sys
from optparse import OptionParser
import numpy as np 
import matplotlib.pyplot as plt
from uncertainties import ufloat
import saxs as sx
from scipy import interpolate

info = """ saxsDiv
      A Python script to divide a SAXS profile by another specified profile.

      The program requires two input argument, the names of the two data files.
      The second data file is divided by the first (the divisor file).  
      Options:
      -h, --help            show this help message and exit
      -i, --info            Show more help information.
      -r, --raw             Raw input file. Default is pdh format
      --noErr               no I error data.
      --scale=SCALEFACT     Divisor data is divided by scale factor. Default = 1.0
      -s, --si              Read data from system standard input and write to
                            standard output
      --so                  Direct output to system standard output
      -t PLOTTYPE, --plot=PLOTTYPE
                            Plot type. Options are none, linear, log, loglog,
                            guinier, kratky. Default is linear

      A cubic spline is used to represent the divisor file, so that the two 
      files are not required to match one another point for point.
      The divisor file is assumed to be composed of just two columns, I and q
      if the --scale option is used, the divisor file is first divided by 
      the scale factor.
      The output is directed to a new file, 
      or to standard output if the -s (--stdo) option is chosen.
      The default behavior is to assume the data file is in PDH format.
      If the file names are preceded by the argument -r, the program assumes the files 
      are in a "raw" format and only looks for rows containing exactly three fields.
            
  """

def main():
    ##### Parse options and arguments   ##########
    parser = OptionParser()
    
    parser.add_option("-i", "--info", action="store_true", dest="showInfo", default=False,
                        help ="Show more help information.")
    parser.add_option("-r", "--raw", action = "store_true", dest="rawFile", default = False, 
                       help="Raw input file. Default is pdh format")
    parser.add_option("--noErr", action = "store_true", 
                   dest="noErr", default = False, 
                   help="no I error data.")
    parser.add_option("--scale", action = "store", type = "float", 
                   dest="scaleFact", default = 1.0, 
                   help="Divisor data is divided by scale factor. Default = 1.0")                       
    parser.add_option("-s", "--si", action = "store_true", dest="stdin", default = False, 
                help="Read data from system standard input and write to standard output")  
    parser.add_option("--so", action = "store_true", dest="stdo", default = False, 
                       help="Direct output to system standard output")                       
    parser.add_option("-t", "--plot", action = "store", type = "string", 
                       dest="plotType", default = "linear", 
                       help="Plot type. Options are none, linear, log, "\
                            + "loglog, guinier, kratky. Default is linear")    
   
    (options, args) = parser.parse_args()

    
    if options.showInfo:
        sys.exit(info)
        
    message = '\n saxsDiv, A Python script to divide a SAXS profile ' \
    			+ 'by another specified profile. ' \
                + '\nRequires two input argument, the names of the two data files. ' \
                 + '\n  The second data file is divided by the first (the divisor file).\n'\
                + ' For help, type > saxsDiv -i'

    fileNames = sx.fileNamer(options,args,2, 'div')
    if fileNames == None:
        sys.exit(message)
    else:
        inFileName = fileNames[1]
        outFileName = fileNames[2]
    
    divFileName =args[0]
    
    ###### Window Title
    if inFileName == None:
        windowTitle = 'SAXS Data divided by ' + divFileName
        inputLegend = ['Input data']
        outLegend = ['SAXS data divided by \n' + divFileName]
    else:   
        inputLegend = [inFileName, divFileName]
        outLegend = [inFileName + ' $\div$ \n\n' + divFileName]
        windowTitle = 'SAXS Data: ' + inFileName + ' divided by ' + divFileName
        
    
    ###### Read input data
    if options.rawFile:
        if options.noErr:
            inData = sx.readQI(inFileName)
        else:
            inData = sx.readQIE(inFileName)
    else:
        header, inData = sx.readPdh(inFileName)
    
    inData = np.array(inData)
        
    divData = sx.readQI(divFileName)
    
    # calculate parameters for cubic spline represenation of the 
    # divisor saxs curve
    tckModel = interpolate.splrep(divData[0],divData[1],s=0)
    
    
    # create matching data sets 
    # that cover the overlapping q-range 
    
    ##### Find common range of q values in two data sets
    qMin = max(inData[0][0],divData[0][0])
    qMax = min(inData[0][-1],divData[0][-1])


    ##### Trim input data to common length
    ##### Interpolated divisor data points
    ##### Scale divisor data, if scale factor is specified
    ##### and generate output data 
    inDataTrim = [[],[],[]]
    outData = [[],[],[]]
    divDataInt = [[],[]]
    for i, q in enumerate(inData[0]):
        if (qMin <= q <= qMax):
            inDataTrim[0].append(inData[0][i])
            inDataTrim[1].append(inData[1][i])
            inDataTrim[2].append(inData[2][i])
            # use interpolated I values from divisor data            
            interpDivI = interpolate.splev(q,tckModel,der=0)/options.scaleFact
            
            outData[0].append(inData[0][i])
            outData[1].append(inData[1][i]/interpDivI)
            outData[2].append(inData[2][i]/interpDivI)
            divDataInt[0].append(q)
            divDataInt[1].append(interpDivI)
    
    # turn everything into numpy arrays
    inDataTrim= np.array(inDataTrim)    
    outData = np.array(outData)
    divDataInt = np.array(divDataInt)
    
           
    #### Plots   
    if options.plotType != 'none':
        plotParam = [options.plotType,0,0]
        if options.rawFile:
            qUnits=0
            absI = False
        else:
            qUnits = header[4][4]
            if header[2][2] == 1:
                absI = True
            else:
                absI = False
        
        
                
        fig = plt.figure()
        plotPos = 211
        ax1 = sx.saxsPlot(fig,plotPos, plotParam, [inData, divDataInt],
                            legends=inputLegend, qUnits=qUnits, absI=absI)
        plotPos=212
        ax2 = sx.saxsPlot(fig,plotPos, plotParam, [outData],
                            legends=outLegend, qUnits=qUnits, absI=absI)
        fig.subplots_adjust(bottom=0.1, hspace=0.25) 
        fig.canvas.set_window_title(windowTitle) 
        plt.show()
        

    ##### write output data to output file
    if options.rawFile:
        sx.writeQIE(outFileName,outData)
    else:
    ####### Include any modifications to the header here
        header[2][0] = len(outData[0])
        sx.writePdh(outFileName, header,outData)

    
def readDivData(divFileName):
    divFile = open(divFileName,'r')
    q=[]
    I=[]    
    for line in divFile.readlines()[1:]: # disregard first line
        line = line[:-1]    # Chop newline character
        fields = line.split()     # Split line into fields
        q.append(float(fields[0]))
        I.append(float(fields[1]))
    return [np.array(q), np.array(I)]     

if __name__=="__main__":
    main()

